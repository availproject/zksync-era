-- does not calculate hot/cold reads

WITH
	MB AS (
		SELECT
			*
		FROM
			MINIBLOCKS MB
		WHERE
			MB.NUMBER >= 40000000
		ORDER BY
			MB.NUMBER ASC
		LIMIT
			10000
	)
SELECT
	STDDEV_SAMP(READ_LOGS_PER_TX) AS STDDEV,
	PERCENTILE_CONT(0.00) WITHIN GROUP (
		ORDER BY
			READ_LOGS_PER_TX ASC
	) AS PCT_00,
	PERCENTILE_CONT(0.01) WITHIN GROUP (
		ORDER BY
			READ_LOGS_PER_TX ASC
	) AS PCT_01,
	PERCENTILE_CONT(0.05) WITHIN GROUP (
		ORDER BY
			READ_LOGS_PER_TX ASC
	) AS PCT_05,
	PERCENTILE_CONT(0.25) WITHIN GROUP (
		ORDER BY
			READ_LOGS_PER_TX ASC
	) AS PCT_25,
	PERCENTILE_CONT(0.50) WITHIN GROUP (
		ORDER BY
			READ_LOGS_PER_TX ASC
	) AS PCT_50,
	PERCENTILE_CONT(0.75) WITHIN GROUP (
		ORDER BY
			READ_LOGS_PER_TX ASC
	) AS PCT_75,
	PERCENTILE_CONT(0.95) WITHIN GROUP (
		ORDER BY
			READ_LOGS_PER_TX ASC
	) AS PCT_95,
	PERCENTILE_CONT(0.99) WITHIN GROUP (
		ORDER BY
			READ_LOGS_PER_TX ASC
	) AS PCT_99,
	PERCENTILE_CONT(1.00) WITHIN GROUP (
		ORDER BY
			READ_LOGS_PER_TX ASC
	) AS PCT_100
FROM
	(
		SELECT
			MINIBLOCK_NUMBER,
			(SUM(READ_WRITE_LOGS) - SUM(WRITE_LOGS)) / SUM(TRANSACTION_COUNT) AS READ_LOGS_PER_TX,
			SUM(TRANSACTION_COUNT) AS TRANSACTION_COUNT
		FROM
			(
				SELECT
					MB.NUMBER AS MINIBLOCK_NUMBER,
					(TX.EXECUTION_INFO ->> 'storage_logs')::BIGINT AS READ_WRITE_LOGS,
					NULL AS WRITE_LOGS,
					1 AS TRANSACTION_COUNT
				FROM
					TRANSACTIONS TX,
					MB
				WHERE
					TX.MINIBLOCK_NUMBER = MB.NUMBER
				UNION
				SELECT
					MB.NUMBER AS MINIBLOCK_NUMBER,
					NULL AS READ_WRITE_LOGS,
					COUNT(SL.*) AS WRITE_LOGS,
					0 AS TRANSACTION_COUNT
				FROM
					STORAGE_LOGS SL,
					MB
				WHERE
					SL.MINIBLOCK_NUMBER = MB.NUMBER
				GROUP BY
					MB.NUMBER
			) S
		GROUP BY
			S.MINIBLOCK_NUMBER
	) T,
	GENERATE_SERIES(1, T.TRANSACTION_COUNT);
